@page "/counter"

<h1 style="text-align:center">Country Details</h1>


@using RihalAssesment.Data
@using RihalAssesment.Model

@inject CountryService service
@inject StudentService stdService

<div class="container">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Country Id</th>
                    <th>Name</th>
                    <th>Count of students</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (country.Any())
                {
                    @foreach (var country in countryDetails)
                    {
                        <tr @onclick="(() => SetCountryForUpdate(country))">
                            <td>@country.id</td>
                            <td>@country.country_name</td>
                            <td>@country.TotalNumOfStudents</td>
                            <td><button class="btn btn-danger" @onclick="(() => DeleteCountry(country))">Delete</button></td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" style="text-align:center"><strong>No data available</strong></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">

            <div class="p-3 mb-3 bg-primary text-white text-center">Add New Country</div>

            <EditForm Model="@NewCountry">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" id="name" class="form-control" @bind-value="@NewCountry.country_name" />
                </div>

                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="AddNewCountry"> Add Country</button>
                </div>
            </EditForm>
        </div>

        <div class="col-5 bg-light m-2 justify-content-end">
            <div class="p-3 mb-1 bg-primary text-white text-center">Update Country</div>

            <EditForm Model="@UpdateCountry">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" id="name" class="form-control" @bind-value="@UpdateCountry.country_name" />
                </div>

                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="UpdateCountryData"> Update Country</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code { 
    List<country> country = new List<country>();
    List<CountryDetails> countryDetails = new List<CountryDetails>();
    List<Students> std = new List<Students>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshCountry();
    }

    private async Task RefreshCountry()
    {
        std = await stdService.GetStudentsAsync();
        country = await service.GetCountryAsync();

        countryDetails = country.Select(p => new CountryDetails
        {
            id = p.id,
            country_name = p.country_name
        }).ToList();

        foreach (var value in countryDetails)
        {
            value.TotalNumOfStudents = std.Where(x => x.country_id == value.id).Count();
        }
    }

    public country NewCountry { get; set; } = new country();

    private async Task AddNewCountry()
    {
        await service.AddCountryAsync(NewCountry);
        NewCountry = new country();
        await RefreshCountry();
    }

    country UpdateCountry = new country();
    private void SetCountryForUpdate(CountryDetails std)
    {
        UpdateCountry.id = std.id;
        UpdateCountry.country_name = std.country_name;
    }

    private async Task UpdateCountryData()
    {
        await service.updateCountryAsync(UpdateCountry);
        await RefreshCountry();
    }

    private async Task DeleteCountry(CountryDetails contry)
    {
        country countryss = new country();
        countryss.id = contry.id;
        countryss.country_name = contry.country_name;

        await service.DeleteCountryAsync(countryss);
        await RefreshCountry();
    }
}

@*<SurveyPrompt Title="" />*@