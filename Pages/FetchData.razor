@page "/fetchdata"

@using RihalAssesment.Data
@using RihalAssesment.Model

@inject ClassService service
@inject StudentService stdService

<h1 style="text-align:center">Class Details</h1>

<div class="container">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Class Id</th>
                    <th>Name</th>
                    <th>Count of students</th>
                    <th>Avg Age of students</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (cls.Any())
                {
                    @foreach (var clss in classDetails)
                    {
                        <tr @onclick="(() => SetClassForUpdate(clss))">
                            <td>@clss.id</td>
                            <td>@clss.class_name</td>
                            <td>@clss.CountOfStudents</td>
                            <td>@clss.AvgAgeOfStudents</td>
                            <td><button class="btn btn-danger" @onclick="(() => DeleteClass(clss))">Delete</button></td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" style="text-align:center"><strong>No data available</strong></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">

            <div class="p-3 mb-3 bg-primary text-white text-center">Add New Class</div>

            <EditForm Model="@NewClass">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" id="name" class="form-control" @bind-value="@NewClass.class_name" />
                </div>

                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="AddNewClass"> Add Class</button>
                </div>
            </EditForm>
        </div>

        <div class="col-5 bg-light m-2 justify-content-end">
            <div class="p-3 mb-1 bg-primary text-white text-center">Update Class</div>

            <EditForm Model="@UpdateClass">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" id="name" class="form-control" @bind-value="@UpdateClass.class_name" />
                </div>

                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="UpdateClassData"> Update Class</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code { 
    List<classes> cls = new List<classes>();
    List<Students> std = new List<Students>();
    List<ClassDetails> classDetails = new List<ClassDetails>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshClass();
    }

    private async Task RefreshClass()
    {
        cls = await service.GetClassesAsync();
        std = await stdService.GetStudentsAsync();

        classDetails = cls.Select(p => new ClassDetails
        {
            id = p.id,
            class_name = p.class_name
        }).ToList();

        var currentYr = DateTime.Now.Year;

        foreach (var value in classDetails)
        {
            value.CountOfStudents = std.Where(x => x.class_id == value.id).Count();
            value.AvgAgeOfStudents = (std.Where(y => y.class_id == value.id).Sum(x => currentYr - x.date_of_birth.Year))/value.CountOfStudents;
        }
    }


    public classes NewClass { get; set; } = new classes();

    private async Task AddNewClass()
    {
        await service.AddClassAsync(NewClass);
        NewClass = new classes();
        await RefreshClass();
    }

    classes UpdateClass = new classes();
    private void SetClassForUpdate(ClassDetails std)
    {
        UpdateClass.id = std.id;
        UpdateClass.class_name = std.class_name;
    }

    private async Task UpdateClassData()
    {
        await service.updateClassesAsync(UpdateClass);
        await RefreshClass();
    }

    private async Task DeleteClass(ClassDetails contry)
    {
        classes cls = new classes();
        cls.id = contry.id;
        cls.class_name = contry.class_name;

        await service.DeleteClassesAsync(cls);
        await RefreshClass();
    }
}

